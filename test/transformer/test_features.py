from pengle.transformer.categorical_features import TargetStatisticsEncoder, MonthEncoding, DayEncoding, TimeEncoding
from pengle.dataset.dataset import Dataset

import pandas as pd
import pytest
import mock
import numpy as np
from pandas.util.testing import assert_frame_equal


def test_target_statistics_encoder():
    train_dataset = Dataset(data=pd.DataFrame([[1, 1],
                                               [1, 1],
                                               [1, 2],
                                               [1, 2],
                                               [2, 1]],
                                              columns=['category1', 'category2']),
                            target=[0, 2, 3, 4, 5],
                            target_column='target')

    test_dataset = Dataset(data=pd.DataFrame([[1, 1],
                                              [1, 1],
                                              [1, 2],
                                              [1, 2],
                                              [3, 1],
                                              [2, 1]], columns=['category1', 'category2']),
                           target=[0, 2, 3, 4, 5],
                           target_column='target')
    train, test = TargetStatisticsEncoder().fit(train_dataset,
                                                test_dataset,
                                                groupby_keys=['category1', 'category2']).transform(save=False)
    df_expected = pd.DataFrame([[2.25, 4, 2.916667, 1.707825, 2.5, 2.333333, 5, 6.333333, 2.516611, 2.0],
                                [2.25, 4, 2.916667, 1.707825, 2.5, 2.333333, 5, 6.333333, 2.516611, 2.0],
                                [2.25, 4, 2.916667, 1.707825, 2.5, 3.500000, 4, 0.500000, 0.707107, 3.5],
                                [2.25, 4, 2.916667, 1.707825, 2.5, 3.500000, 4, 0.500000, 0.707107, 3.5],
                                [5.00, 5, np.nan, np.nan, 5.0, 2.333333, 5, 6.333333, 2.516611, 2.0]],
                               columns=['target_enc_mean_category1', 'target_enc_max_category1',
                                        'target_enc_var_category1', 'target_enc_std_category1',
                                        'target_enc_median_category1', 'target_enc_mean_category2',
                                        'target_enc_max_category2', 'target_enc_var_category2',
                                        'target_enc_std_category2', 'target_enc_median_category2'])
    assert_frame_equal(train, df_expected)
    df_expected = pd.DataFrame([[2.25, 4.0, 2.916667, 1.707825, 2.5, 2.333333, 5, 6.333333, 2.516611, 2.0],
                                [2.25, 4.0, 2.916667, 1.707825, 2.5, 2.333333, 5, 6.333333, 2.516611, 2.0],
                                [2.25, 4.0, 2.916667, 1.707825, 2.5, 3.500000, 4, 0.500000, 0.707107, 3.5],
                                [2.25, 4.0, 2.916667, 1.707825, 2.5, 3.500000, 4, 0.500000, 0.707107, 3.5],
                                [np.nan, np.nan, np.nan, np.nan, np.nan, 2.333333, 5, 6.333333, 2.516611, 2.0],
                                [5.00, 5.0, np.nan, np.nan, 5.0, 2.333333, 5, 6.333333, 2.516611, 2.0]],
                               columns=['target_enc_mean_category1', 'target_enc_max_category1',
                                        'target_enc_var_category1', 'target_enc_std_category1',
                                        'target_enc_median_category1', 'target_enc_mean_category2',
                                        'target_enc_max_category2', 'target_enc_var_category2',
                                        'target_enc_std_category2', 'target_enc_median_category2'])
    assert_frame_equal(test, df_expected)


def test_month_encoding():
    train_dataset = Dataset(data=pd.DataFrame([['2017-01-01 01:24:00', '2017-11-01 12:24:00'],
                                               ['2017-02-02 02:24:00', '2017-11-01 12:24:00'],
                                               ['2017-03-03 03:24:00', '2017-11-01 12:24:00'],
                                               ['2017-04-04 04:24:00', '2017-11-01 12:24:00'],
                                               ['2017-05-05 05:24:00', '2017-11-01 12:24:00'],
                                               ['2017-06-06 06:24:00', '2017-11-01 12:24:00'],
                                               ['2017-07-07 07:24:00', '2017-11-01 12:24:00'],
                                               ['2017-08-08 08:24:00', '2017-11-01 12:24:00'],
                                               ['2017-09-09 09:24:00', '2017-11-01 12:24:00'],
                                               ['2017-10-10 10:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-11 11:24:00', '2017-11-01 12:24:00'],
                                               ['2017-12-12 12:24:00', '2017-11-01 12:24:00']],
                                              columns=['date1', 'date2']), target=None)
    test_dataset = Dataset(data=pd.DataFrame([['2017-01-01 01:24:00', '2017-11-01 12:24:00'],
                                              ['2017-02-02 02:24:00', '2017-11-01 12:24:00'],
                                              ['2017-03-03 03:24:00', '2017-11-01 12:24:00'],
                                              ['2017-04-04 04:24:00', '2017-11-01 12:24:00'],
                                              ['2017-05-05 05:24:00', '2017-11-01 12:24:00'],
                                              ['2017-06-06 06:24:00', '2017-11-01 12:24:00'],
                                              ['2017-07-07 07:24:00', '2017-11-01 12:24:00'],
                                              ['2017-08-08 08:24:00', '2017-11-01 12:24:00'],
                                              ['2017-09-09 09:24:00', '2017-11-01 12:24:00'],
                                              ['2017-10-10 10:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-11 11:24:00', '2017-11-01 12:24:00'],
                                              ['2017-12-12 12:24:00', '2017-11-01 12:24:00']],
                                             columns=['date1', 'date2']), target=None)
    df_expected = pd.DataFrame([[8.660254e-01, 5.000000e-01, 1.0, -1.133108e-15],
                                [6.123234e-17, 1.000000e+00, 1.0, -1.133108e-15],
                                [-5.000000e-01, 8.660254e-01, 1.0, -1.133108e-15],
                                [-8.660254e-01, 5.000000e-01, 1.0, -1.133108e-15],
                                [-1.000000e+00, 1.224647e-16, 1.0, -1.133108e-15],
                                [-8.660254e-01, -5.000000e-01, 1.0, -1.133108e-15],
                                [-5.000000e-01, -8.660254e-01, 1.0, -1.133108e-15],
                                [-1.836970e-16, -1.000000e+00, 1.0, -1.133108e-15],
                                [5.000000e-01, -8.660254e-01, 1.0, -1.133108e-15],
                                [18.660254e-01, -5.000000e-01, 1.0, -1.133108e-15],
                                [11.000000e+00, -2.449294e-16, 1.0, -1.133108e-15]],
                               columns=['date1_cos', 'date1_sin', 'date2_cos', 'date2_sin'])
    train, test = MonthEncoding().fit(train_dataset, test_dataset, columns=['date1', 'date2']).transform(save=False)
    # 計算誤差があるため
    assert (train - df_expected).sum().sum() < 0.001
    assert (test - df_expected).sum().sum() < 0.001


def test_day_encoding():
    train_dataset = Dataset(data=pd.DataFrame([['2017-01-01 01:24:00', '2017-11-01 12:24:00'],
                                               ['2017-02-02 02:24:00', '2017-11-01 12:24:00'],
                                               ['2017-03-03 03:24:00', '2017-11-01 12:24:00'],
                                               ['2017-04-04 04:24:00', '2017-11-01 12:24:00'],
                                               ['2017-05-05 05:24:00', '2017-11-01 12:24:00'],
                                               ['2017-06-06 06:24:00', '2017-11-01 12:24:00'],
                                               ['2017-07-07 07:24:00', '2017-11-01 12:24:00'],
                                               ['2017-08-08 08:24:00', '2017-11-01 12:24:00'],
                                               ['2017-09-09 09:24:00', '2017-11-01 12:24:00'],
                                               ['2017-10-10 10:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-11 11:24:00', '2017-11-01 12:24:00'],
                                               ['2017-12-12 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-13 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-14 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-15 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-16 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-17 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-18 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-19 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-20 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-21 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-22 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-23 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-24 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-25 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-26 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-27 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-28 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-29 12:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-30 12:24:00', '2017-11-01 12:24:00']], columns=['date1', 'date2']), target=None)
    test_dataset = Dataset(data=pd.DataFrame([['2017-11-01 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-02 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-03 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-04 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-05 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-06 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-07 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-08 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-09 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-10 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-11 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-12 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-13 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-14 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-15 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-16 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-17 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-18 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-19 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-20 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-21 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-22 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-23 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-24 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-25 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-26 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-27 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-28 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-29 12:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-30 12:24:00', '2017-11-01 12:24:00']], columns=['date1', 'date2']), target=None)
    train, test = DayEncoding().fit(train_dataset, test_dataset, columns=['date1', 'date2']).transform(save=False)
    df_expected = pd.DataFrame([[0.978148, 2.079117e-01, 1.0, -2.449294e-16],
                                [0.913545, 4.067366e-01, 1.0, -2.449294e-16],
                                [0.809017, 5.877853e-01, 1.0, -2.449294e-16],
                                [0.669131, 7.431448e-01, 1.0, -2.449294e-16],
                                [0.500000, 8.660254e-01, 1.0, -2.449294e-16],
                                [0.309017, 9.510565e-01, 1.0, -2.449294e-16],
                                [0.104528, 9.945219e-01, 1.0, -2.449294e-16],
                                [-0.104528, 9.945219e-01, 1.0, -2.449294e-16],
                                [-0.309017, 9.510565e-01, 1.0, -2.449294e-16],
                                [-0.500000, 8.660254e-01, 1.0, -2.449294e-16],
                                [-0.669131, 7.431448e-01, 1.0, -2.449294e-16],
                                [-0.809017, 5.877853e-01, 1.0, -2.449294e-16],
                                [-0.913545, 4.067366e-01, 1.0, -2.449294e-16],
                                [-0.978148, 2.079117e-01, 1.0, -2.449294e-16],
                                [-1.000000, 5.665539e-16, 1.0, -2.449294e-16],
                                [-0.978148, -2.079117e-01, 1.0, -2.449294e-16],
                                [-0.913545, -4.067366e-01, 1.0, -2.449294e-16],
                                [-0.809017, -5.877853e-01, 1.0, -2.449294e-16],
                                [-0.669131, -7.431448e-01, 1.0, -2.449294e-16],
                                [-0.500000, -8.660254e-01, 1.0, -2.449294e-16],
                                [-0.309017, -9.510565e-01, 1.0, -2.449294e-16],
                                [-0.104528, -9.945219e-01, 1.0, -2.449294e-16],
                                [0.104528, -9.945219e-01, 1.0, -2.449294e-16],
                                [0.309017, -9.510565e-01, 1.0, -2.449294e-16],
                                [0.500000, -8.660254e-01, 1.0, -2.449294e-16],
                                [0.669131, -7.431448e-01, 1.0, -2.449294e-16],
                                [0.809017, -5.877853e-01, 1.0, -2.449294e-16],
                                [0.913545, -4.067366e-01, 1.0, -2.449294e-16],
                                [0.978148, -2.079117e-01, 1.0, -2.449294e-16],
                                [1.000000, -1.133108e-15, 1.0, -2.449294e-16]],
                               columns=['date1_cos', 'date1_sin', 'date2_cos', 'date2_sin'])
    assert_frame_equal(train, df_expected)
    assert_frame_equal(test, df_expected)


def test_time_encoding():
    train_dataset = Dataset(data=pd.DataFrame([['2017-01-01 01:24:00', '2017-11-01 12:24:00'],
                                               ['2017-02-02 02:24:00', '2017-11-01 12:24:00'],
                                               ['2017-03-03 03:24:00', '2017-11-01 12:24:00'],
                                               ['2017-04-04 04:24:00', '2017-11-01 12:24:00'],
                                               ['2017-05-05 05:24:00', '2017-11-01 12:24:00'],
                                               ['2017-06-06 06:24:00', '2017-11-01 12:24:00'],
                                               ['2017-07-07 07:24:00', '2017-11-01 12:24:00'],
                                               ['2017-08-08 08:24:00', '2017-11-01 12:24:00'],
                                               ['2017-09-09 09:24:00', '2017-11-01 12:24:00'],
                                               ['2017-10-10 10:24:00', '2017-11-01 12:24:00'],
                                               ['2017-11-11 11:24:00', '2017-11-01 12:24:00'],
                                               ['2017-12-12 12:24:00', '2017-11-01 12:24:00']],
                                              columns=['date1', 'date2']), target=None)
    test_dataset = Dataset(data=pd.DataFrame([['2017-01-01 01:24:00', '2017-11-01 12:24:00'],
                                              ['2017-02-02 02:24:00', '2017-11-01 12:24:00'],
                                              ['2017-03-03 03:24:00', '2017-11-01 12:24:00'],
                                              ['2017-04-04 04:24:00', '2017-11-01 12:24:00'],
                                              ['2017-05-05 05:24:00', '2017-11-01 12:24:00'],
                                              ['2017-06-06 06:24:00', '2017-11-01 12:24:00'],
                                              ['2017-07-07 07:24:00', '2017-11-01 12:24:00'],
                                              ['2017-08-08 08:24:00', '2017-11-01 12:24:00'],
                                              ['2017-09-09 09:24:00', '2017-11-01 12:24:00'],
                                              ['2017-10-10 10:24:00', '2017-11-01 12:24:00'],
                                              ['2017-11-11 11:24:00', '2017-11-01 12:24:00'],
                                              ['2017-12-12 12:24:00', '2017-11-01 12:24:00']],
                                             columns=['date1', 'date2']), target=None)
    df_expected = pd.DataFrame([[8.660254e-01, 5.000000e-01, 1.0, -2.449294e-16],
                                [5.000000e-01, 8.660254e-01, 1.0, -2.449294e-16],
                                [6.123234e-17, 1.000000e+00, 1.0, -2.449294e-16],
                                [-5.000000e-01, 8.660254e-01, 1.0, -2.449294e-16],
                                [-8.660254e-01, 5.000000e-01, 1.0, -2.449294e-16],
                                [-1.000000e+00, 1.224647e-16, 1.0, -2.449294e-16],
                                [-8.660254e-01, -5.000000e-01, 1.0, -2.449294e-16],
                                [-5.000000e-01, -8.660254e-01, 1.0, -2.449294e-16],
                                [-1.836970e-16, -1.000000e+00, 1.0, -2.449294e-16],
                                [5.000000e-01, -8.660254e-01, 1.0, -2.449294e-16],
                                [8.660254e-01, -5.000000e-01, 1.0, -2.449294e-16],
                                [1.000000e+00, -2.449294e-16, 1.0, -2.449294e-16]],
                               columns=['date1_cos', 'date1_sin', 'date2_cos', 'date2_sin'])
    train, test = TimeEncoding().fit(train_dataset, test_dataset, columns=['date1', 'date2']).transform(save=False)
    assert_frame_equal(train, df_expected)
    assert_frame_equal(test, df_expected)
